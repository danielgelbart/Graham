- @numshares = @stock.numshares.sort{ |a,b| a.year <=> b.year }
- @earnings = @stock.eps.sort{ |a,b| a.year <=> b.year }
%p
  Name:
  =h @stock.name
%p
  Ticker:
  =h @stock.ticker
  = link_to "on_google", "http://www.google.com/finance?q=#{@stock.ticker}"
%p
  = "last price: #{@stock.price}"
%script{ :type => "text/javascript", :charset => "utf-8"}
  :plain
    $(function() {
      new Highcharts.Chart({
        chart: {
          renderTo: "stock_chart"
        },
        title: {
          text: "Earnings"
        },
        xAxis: {
          //margins: #{ @earnings.map{ |s| s.margin.to_f } }
        },
        yAxis: [{  // For earnings
          title: {
            text: "Earnings"
          }
        },{        // For Shares outstanding
          title: {
            text: "Shares Outstanding"
          },
          opposite: true
        },{        // For Margin
          title: {
            text: "Margin"
          },
          opposite: true
        }],
        series: [{ 
          name: "Shares Outstanding",
          type: 'line',
          yAxis: 2,
          pointStart: #{ @numshares.last.year - @numshares.size + 1 },
          pointInterval: 1,
          data: #{ @numshares.map{|s| s.shares_to_i } }
        }, { 
          name: "Margin",
          type: 'line',
          pointStart: #{ @earnings.last.year - @earnings.size + 1 },
          pointInterval: 1,
          data: #{ @earnings.map{ |s| 100 * s.margin.to_f } }
        }, { 
          name: "Revenue",
          type: 'column',
          yAxis: 1,
          pointStart: #{ @earnings.last.year - @earnings.size + 1 },
          pointInterval: 1,
          data: #{ @earnings.map{|s| s.revenue.to_i } }
        }, {
          name: "Net Income",
          type: 'column',
          yAxis: 1,
          pointStart: #{ @earnings.last.year - @earnings.size + 1 },
          pointInterval: 1,
          data: #{ @income = @earnings.map{|s| s.net_income.to_i } },
          dataLabels: {
            enabled: false,
            rotation: 0,
            align: 'center'
            //formatter: function() {
            //  return this.y ;
            //}
          }
        }]
      });
    });
#stock_chart{ :style => "width:860px; height:460px;"}
%table
  %tr
    %td
      Big enough?
    %td
      = "#{yes_no(@stock.big_enough?)}"
  %tr
    %td
      Good balance ratios?
    %td
      = "#{yes_no(@stock.financialy_strong?)}"
      - if !@stock.has_currant_ratio
        %td
          = "**Using only total (not current) ratios"
    %td
      = link_to "Balance sheet",  "http://moneycentral.msn.com/investor/invsub/results/statemnt.aspx?Symbol=US%3a#{@stock.ticker}&lstStatement=Balance&stmtView=Ann"
  - if @stock.bargain?
    %tr
      %td
        = "At that ratio, #{@stock.ticker} is a bargain!"
  %tr
    %td
      No earnings dificet?
    %td
      = "#{yes_no(@stock.no_earnings_deficit?)}, (YES means company has not had deficit in 10 years)"
  %tr
    %td
      Dividend record 
    %td
      = yes_no(!@stock.dividends.empty? && @stock.continous_dividend_record?)
    %td
      = link_to "Dividends", @stock.dividend_url
  %tr
    %td
      Earnings growth
    %td
      = "#{yes_no(@stock.eps_growth?)}"
  - if @stock.price_limit >= 0
    %tr
      %td
        Cheap?
      %td
        = "#{yes_no(@stock.cheap?)}, #{@stock.ticker} has a defensive limit buy price of #{@stock.price_limit}, and is trading at #{@stock.price}"
  - else
    %tr
      %td
        To many losses to recomend a buying price limit
%p
  Earnigs (12 month trailing per share):
  =h @stock.ttm_eps
%p
  - if !@stock.historic_eps(7).nil?
    Earnigs average per share, past 7 years:
    =h short_float(@stock.historic_eps(7))
  - else
    Earnings do not go back far enought to compute histroic (average) eps
%p
  - if !@stock.ten_year_eps.nil?
    10 year P/E (2001-2011 adjusted for inflation)
    = short_float(@stock.ten_year_eps)
  - else
    Cannot calculate 10 year eps because earnings don't go back that far
%p
  - if @stock.dilution >= 1
    Stock was DILUTED by 
    #{ ((@stock.dilution - 1)* 100).to_i } % 
  - else
    Shares REDUCED by
    #{ ((1 - @stock.dilution) * 100).to_i } %
%p
  - @margins = @earnings.map{ |s| s.margin}.select{ |v| v != 0}
  Average Margin over past #{ @margins.size } years is #{ "%5.2f" % (100 * @margins.inject{ |sum, el| sum + el }.to_f / @margins.size) } %
%table.stock-list
  %thead
    %th
      year
    %th
      Eps
    %th
      Shares outstanding
    %th
      Margin
  %tbody
    - @stock.eps.sort{ |a,b| b.year <=> a.year }.each do |e|
      %tr
        %td
          = e.year
        %td
          = short_float(e.eps * @stock.inflation_ratio_for(e.year) )
        %td
          = (@stock.numshares.select{ |s| s.year == e.year } ).first.shares
        %td
          = "%5.2f" % e.margin

= link_to 'Back', stocks_path
