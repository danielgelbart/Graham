%h1
  =h @stock.name
%h2
  Ticker:
  =h @stock.ticker
  = link_to "on_google", "http://www.google.com/finance?q=#{@stock.ticker}"
%p
  = "last price: #{@stock.price}"
  = button_to("Update price", {:price => @stock.update_price },
  :method => :put )
- if !@ttm.nil?
  .red
    Showing TTM data in last column of chart   
- if !@notes.empty?
  .blue
    Stock has notes (displayed at bottom)
%script{ :type => "text/javascript", :charset => "utf-8"}
  :plain
    $(function() {
      new Highcharts.Chart({
        chart: {
          renderTo: "stock_chart"
        },
        title: {
          text: "Earnings"
        },
        xAxis: {

          labels: {
            formatter: function () {
                return Highcharts.dateFormat("%Y", Date.UTC(this.value, 0, 1));
            }
          }, // labels
        },
        yAxis: [{  // For earnings
          title: {
            text: "Earnings"
          },
          opposite: true
        },{        // For Shares outstanding
          title: {
            text: "Shares Outstanding"
          }
        }],
        series: [{ 
          name: "Shares Outstanding",
          type: 'line',
          yAxis: 1,
          pointStart: #{ @earnings.first.year },
          pointInterval: 1,
          data: #{ @numshare }
        }, { 
          name: "Revenue",
          type: 'column',
          pointStart: #{ @earnings.first.year },
          pointInterval: 1,
          data: #{ @revenue }
        }, { 
          name: "Net Income",
          type: 'column',
          pointStart: #{ @earnings.first.year },
          pointInterval: 1,
          data: #{ @income }
        }]

      });
    });
#stock_chart{ :style => "width:860px; height:460px;"}
%table
  %tr
    %td
      Sales greater than 500 mil?
    %td
      = "#{yes_no(@stock.big_enough?)}"
  %tr
    %td
      Good balance ratios?
    %td
      = "#{yes_no(@stock.financialy_strong?)}"
      - if !@stock.has_currant_ratio
        %td
          = "**Using only total (not current) ratios"
    %td
      = link_to "Balance sheet",  "http://investing.money.msn.com/investments/stock-balance-sheet/?symbol=us%3A#{@stock.ticker}&stmtView=Ann"
  - if @stock.bargain?
    %tr
      %td
        = "At that ratio, #{@stock.ticker} is a bargain!"
  %tr
    %td
      No earnings dificet?
    %td
      = "#{yes_no(@stock.no_earnings_deficit?)}, (YES means company has not had deficit in 10 years)"
  %tr
    %td
      Dividend record 
    %td
      - div_ans = yes_no(!@stock.dividends.empty? && @stock.continous_dividend_record?)
      = div_ans
      - if div_ans == "No"
        ,         Currently paying dividends?
        = yes_no( @stock.pays_dividends )
    %td
      = link_to "Dividends", @stock.dividend_url
  %tr
    %td
      Earnings growth
    %td
      = "#{yes_no(@stock.eps_growth?)}"
  - if @stock.price_limit >= 0
    %tr
      %td
        Cheap?
      %td
        = "#{yes_no(@stock.cheap?)}. "
        - if @stock.overpriced?
          = " #{@stock.ticker} Is overpriced, might consider selling:"
        = "#{@stock.ticker} has a defensive limit buy price of #{short_float(@stock.price_limit)}, and is trading at #{@stock.price} and is overvalued at #{ @stock.valuation_limit }"
  - else
    %tr
      %td
        To many losses to recomend a buying price limit
%p
  Earnigs (12 month trailing per share):
  =h  "%5.2f" % @stock.ttm_eps 
%p
  - if !@stock.historic_eps(7).nil?
    Earnigs average per share, past 7 years, (adjusted for inflation):
    = short_float(@stock.historic_eps(7))
  - else
    Earnings do not go back far enought to compute histroic (average) eps
%p
  Price to book :
  = sprintf( "%.2f", @stock.price.to_f / @stock.book_value_per_share)    
%p
  1 year P/E :
  =h short_float( @stock.pe )
%p
  - if !@stock.historic_eps(5).nil?
    5 year P/E (adjusted for inflation)
    = short_float( @stock.price / @stock.historic_eps(5).to_f )
  - else
    Cannot calculate 5 year eps because earnings don't go back that far    
%p
  - if !@stock.ten_year_eps.nil?
    10 year P/E (adjusted for inflation)
    = short_float(@stock.ten_year_eps)
  - else
    Cannot calculate 10 year eps because earnings don't go back that far
%p
  - if @stock.dilution >= 1
    Stock was DILUTED by 
    #{ ((@stock.dilution - 1)* 100).to_i } % 
  - else
    Shares REDUCED by
    #{ ((1 - @stock.dilution) * 100).to_i } %
%p
  - @margins = @earnings.map{ |s| s.margin}.select{ |v| v != 0}
  Average Margin over past #{ @margins.size } years is #{ "%5.2f" % (100 * @margins.inject{ |sum, el| sum + el }.to_f / @margins.size) } %
  
%table.stock-list
  %thead
    %th
      year
    %th
      Current Ratio
    %th
      Book Value   
    %th
      Earnings
    %th
      ROE  
    %th  
      Eps (NOT adjusted)
    %th
      Shares outstanding
    %th
      Margin
  %tbody
    - @earnings.sort{ |a,b| b.year <=> a.year }.each do |e|
      %tr
        %td
          = e.year
        %td
          - bs = (@stock.balance_sheets.select{ |b| b.year == e.year } ).first
          = short_float(bs.current_ratio) if bs 
        %td
          - if bs
            = sprintf("%.1f", bs.equity.to_f / 1000000000) + " Bil"
        %td
          = sprintf("%.1f", e.net_income.to_f / 1000000000) + " Bil"
        %td
          - if bs
            = sprintf("%.2f", e.net_income.to_f /  bs.equity.to_f)
        %td
          = short_float(e.eps) # inflation calculation is incorrect
        %td
          = e.shares_to_str 
        %td
          = "%5.2f" % e.margin
- if !@notes.empty?
  %table.stock-list
    %thead
      %th
        year
      %th
        pertains to
      %th
        note  
    %tbody
      - @notes.sort{ |a,b| b.year <=> a.year }.each do |n|
        %tr
          %td
            = n.year
          %td
            = n.pertains_to 
          %td
            = n.note

= link_to 'Back', stocks_path
